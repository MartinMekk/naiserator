/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/nais/naiserator/pkg/apis/naiserator/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplicationListLister helps list ApplicationLists.
type ApplicationListLister interface {
	// List lists all ApplicationLists in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationList, err error)
	// ApplicationLists returns an object that can list and get ApplicationLists.
	ApplicationLists(namespace string) ApplicationListNamespaceLister
	ApplicationListListerExpansion
}

// applicationListLister implements the ApplicationListLister interface.
type applicationListLister struct {
	indexer cache.Indexer
}

// NewApplicationListLister returns a new ApplicationListLister.
func NewApplicationListLister(indexer cache.Indexer) ApplicationListLister {
	return &applicationListLister{indexer: indexer}
}

// List lists all ApplicationLists in the indexer.
func (s *applicationListLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationList))
	})
	return ret, err
}

// ApplicationLists returns an object that can list and get ApplicationLists.
func (s *applicationListLister) ApplicationLists(namespace string) ApplicationListNamespaceLister {
	return applicationListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplicationListNamespaceLister helps list and get ApplicationLists.
type ApplicationListNamespaceLister interface {
	// List lists all ApplicationLists in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ApplicationList, err error)
	// Get retrieves the ApplicationList from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ApplicationList, error)
	ApplicationListNamespaceListerExpansion
}

// applicationListNamespaceLister implements the ApplicationListNamespaceLister
// interface.
type applicationListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApplicationLists in the indexer for a given namespace.
func (s applicationListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApplicationList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApplicationList))
	})
	return ret, err
}

// Get retrieves the ApplicationList from the indexer for a given namespace and name.
func (s applicationListNamespaceLister) Get(name string) (*v1alpha1.ApplicationList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("applicationlist"), name)
	}
	return obj.(*v1alpha1.ApplicationList), nil
}
